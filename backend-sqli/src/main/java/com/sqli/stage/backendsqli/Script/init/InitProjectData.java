
package com.sqli.stage.backendsqli.Script.init;

import com.sqli.stage.backendsqli.entity.*;
import com.sqli.stage.backendsqli.entity.Enums.*;
import com.sqli.stage.backendsqli.repository.ProjetRepository;
import com.sqli.stage.backendsqli.repository.TaskRepository;
import com.sqli.stage.backendsqli.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Component;

import jakarta.annotation.PostConstruct;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

@Component
@RequiredArgsConstructor
public class InitProjectData {

    private final ProjetRepository projetRepository;
    private final UserRepository userRepository;
    private final TaskRepository taskRepository;

    @PostConstruct
    public void initProjects() {
        if (projetRepository.count() > 0) return;

        System.out.println("üöÄ INITIALISATION DES PROJETS ET T√ÇCHES");
        System.out.println("========================================");

        // R√©cup√©rer les utilisateurs par r√¥le
        User tahaChef = userRepository.findById(2).orElseThrow(() -> new RuntimeException("Taha Chef non trouv√©"));
        User amineChef = userRepository.findById(3).orElseThrow(() -> new RuntimeException("Amine Chef non trouv√©"));
        User wassimDev = userRepository.findById(4).orElseThrow(() -> new RuntimeException("Wassim Dev non trouv√©"));
        User ahmedDev = userRepository.findById(5).orElseThrow(() -> new RuntimeException("Ahmed Dev non trouv√©"));
        User mouadDev = userRepository.findById(6).orElseThrow(() -> new RuntimeException("Mouad Dev non trouv√©"));
        User youssefDev = userRepository.findById(7).orElseThrow(() -> new RuntimeException("Youssef Dev non trouv√©"));
        User fatimaClient = userRepository.findById(8).orElseThrow(() -> new RuntimeException("Fatima Client non trouv√©"));
        User karimClient = userRepository.findById(9).orElseThrow(() -> new RuntimeException("Karim Client non trouv√©"));
        User aminaClient = userRepository.findById(10).orElseThrow(() -> new RuntimeException("Amina Client non trouv√©"));

        // Cr√©er les projets
        System.out.println("\nüìã CR√âATION DES PROJETS");
        System.out.println("------------------------");

        Project projetAlpha = createProject("Projet Alpha", "D√©veloppement d'une API REST moderne avec Spring Boot et React",
            true, TypeProjet.Delivery, StatutProjet.EN_COURS,
            LocalDate.of(2025, 8, 1), LocalDate.of(2025, 9, 30),
            fatimaClient, tahaChef, Arrays.asList(wassimDev, ahmedDev));

        Project projetBeta = createProject("Projet Beta", "Refonte compl√®te du portail client avec nouvelle interface utilisateur",
            false, TypeProjet.Interne, StatutProjet.EN_COURS,
            LocalDate.of(2025, 8, 5), LocalDate.of(2025, 10, 15),
            karimClient, amineChef, Arrays.asList(mouadDev, youssefDev));

        Project projetGamma = createProject("Projet Gamma", "Maintenance TMA et am√©liorations du syst√®me existant",
            true, TypeProjet.TMA, StatutProjet.EN_COURS,
            LocalDate.of(2025, 8, 10), LocalDate.of(2025, 11, 10),
            aminaClient, tahaChef, Arrays.asList(wassimDev, mouadDev));

        Project projetDelta = createProject("Projet Delta", "POC microservices et architecture distribu√©e",
            true, TypeProjet.Interne, StatutProjet.EN_COURS,
            LocalDate.of(2025, 7, 15), LocalDate.of(2025, 9, 15),
            fatimaClient, amineChef, Arrays.asList(ahmedDev, youssefDev));

        // Cr√©er les t√¢ches pour chaque projet
        System.out.println("\n‚úÖ CR√âATION DES T√ÇCHES");
        System.out.println("----------------------");

        createTasksForProject(projetAlpha, Arrays.asList(tahaChef, wassimDev, ahmedDev));
        createTasksForProject(projetBeta, Arrays.asList(amineChef, mouadDev, youssefDev));
        createTasksForProject(projetGamma, Arrays.asList(tahaChef, wassimDev, mouadDev));
        createTasksForProject(projetDelta, Arrays.asList(amineChef, ahmedDev, youssefDev));

        System.out.println("\nüéØ INITIALISATION TERMIN√âE AVEC SUCC√àS !");
        System.out.println("=========================================");
        System.out.println("üìä R√âSUM√â :");
        System.out.println("   ‚Ä¢ 4 Projets cr√©√©s");
        System.out.println("   ‚Ä¢ 16 T√¢ches cr√©√©es (4 par projet)");
        System.out.println("   ‚Ä¢ 2 Chefs de projet assign√©s");
        System.out.println("   ‚Ä¢ 4 D√©veloppeurs r√©partis sur les projets");
        System.out.println("   ‚Ä¢ 3 Clients avec projets vari√©s");
    }

    private Project createProject(String titre, String description, boolean publicLink, TypeProjet type, 
                                StatutProjet statut, LocalDate dateDebut, LocalDate dateFin, 
                                User client, User createdBy, List<User> developpeurs) {
        
        Project project = new Project();
        project.setTitre(titre);
        project.setDescription(description);
        project.setUuidPublic(generateShortHexUUID());
        project.setPublicLinkEnabled(publicLink);
        project.setType(type);
        project.setStatut(statut);
        project.setDateDebut(dateDebut);
        project.setDateFin(dateFin);
        project.setClient(client);
        project.setCreatedBy(createdBy);
        project.setProgression(BigDecimal.valueOf(25.0)); // Progression initiale
        
        // Sauvegarder le projet d'abord sans les d√©veloppeurs
        Project savedProject = projetRepository.save(project);
        
        // Maintenant ajouter les d√©veloppeurs et sauvegarder √† nouveau
        savedProject.setDeveloppeurs(developpeurs);
        savedProject = projetRepository.save(savedProject);
        
        System.out.println("‚úÖ Projet cr√©√©: " + titre);
        System.out.println("   Client: " + client.getNom());
        System.out.println("   Chef: " + createdBy.getNom());
        System.out.println("   D√©veloppeurs: " + developpeurs.size());
        
        return savedProject;
    }

    private void createTasksForProject(Project project, List<User> developpeurs) {
        String[] taskTitles = {
            "Analyse des besoins et sp√©cifications",
            "Conception technique et architecture",
            "D√©veloppement et impl√©mentation",
            "Tests et validation"
        };
        
        String[] taskDescriptions = {
            "√âtudier les besoins utilisateur et d√©finir les sp√©cifications fonctionnelles et techniques",
            "Concevoir l'architecture du syst√®me, les mod√®les de donn√©es et les interfaces",
            "Impl√©menter les fonctionnalit√©s selon les sp√©cifications et la conception",
            "Effectuer les tests unitaires, d'int√©gration et de validation utilisateur"
        };
        
        StatutTache[] taskStatuses = {
            StatutTache.TERMINE,
            StatutTache.EN_COURS,
            StatutTache.EN_COURS,
            StatutTache.NON_COMMENCE
        };
        
        Priorite[] taskPriorities = {
            Priorite.ELEVEE,
            Priorite.CRITIQUE,
            Priorite.MOYENNE,
            Priorite.BASSE
        };
        
        for (int i = 0; i < taskTitles.length; i++) {
            Task task = new Task();
            task.setTitre(taskTitles[i]);
            task.setDescription(taskDescriptions[i]);
            task.setDateDebut(project.getDateDebut().plusDays(i * 7)); // Espacer les t√¢ches
            task.setDateFin(project.getDateDebut().plusDays((i + 1) * 7));
            task.setStatut(taskStatuses[i]);
            task.setPriorite(taskPriorities[i]);
            task.setProject(project);
            task.setDeveloppeur(developpeurs.get(i % developpeurs.size())); // R√©partir les t√¢ches
            task.setPlannedHours(8 + (i * 4)); // 8h, 12h, 16h, 20h
            task.setEffectiveHours(task.getStatut() == StatutTache.TERMINE ? task.getPlannedHours() : 0);
            task.setRemainingHours(task.getStatut() == StatutTache.TERMINE ? 0 : task.getPlannedHours());
            
            taskRepository.save(task);
            
            System.out.println("   üìù T√¢che: " + taskTitles[i] + " ‚Üí " + task.getDeveloppeur().getNom());
        }
    }

    private String generateShortHexUUID() {
        return UUID.randomUUID().toString().replace("-", "").substring(0, 8);
    }
}

